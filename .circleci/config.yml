version: 2.1

commands: # a reusable command with parameters
  install_doppler:
    description: 'Install Doppler'
    steps:
      - run:
          name: 'Install Doppler'
          command: (curl -Ls --tlsv1.2 --proto "=https" --retry 3 https://cli.doppler.com/install.sh || wget -t 3 -qO- https://cli.doppler.com/install.sh) | sudo sh -s -- --verify-signature

  install-dependencies:
    description: 'Install Dependencies (using cache)'
    steps:
      - restore_cache:
          keys:
            - v1-npm-deps-{{ checksum "package-lock.json" }}
            - v1-npm-deps-
      - run: npm install
      - save_cache:
          key: v1-npm-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

  cancel-non-affected:
    description: 'Check if application has changes'
    parameters:
      application:
        type: string
    steps:
      - run:
          name: Check if application has changes
          command: |
            changedApps=$(npx nx print-affected --select=projects)
            appRegex='( |^)<< parameters.application>>(,|$)'

            echo "Apps with changes: "
            echo $changedApps

            if [[ "$changedApps" =~ $appRegex ]]; then
               echo "App has changes, not halting"
            else
               curl -X POST https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel -H 'Accept: application/json' -u "${CIRCLE_TOKEN}:"
            fi

  set-shas:
    description: |
      Derives SHAs for base and head for use in `nx affected` commands in CI
    parameters:
      error-on-no-successful-workflow:
        default: false
        description: |
          By default, if no successful workflow is found on the main branch to determine the SHA,
          we will log a warning and use HEAD~1. Enable this option to error and exit instead.
        type: boolean
      main-branch-name:
        default: main
        description: |
          The name of the main branch in your repo, used as the target of PRs. E.g. main, master etc.
        type: string
      application-name:
        type: string
    steps:
      - run:
          command: |
            echo "$PARAM_SCRIPT" >> "index.js"
            RESPONSE=$(node index.js $CIRCLE_BUILD_URL $CIRCLE_BRANCH $PARAM_MAIN_BRANCH $PARAM_ERROR_ON_NO_SUCCESSFUL_WORKFLOW)
            echo "$RESPONSE"
            BASE_SHA=$(echo "$RESPONSE" | grep 'Commit:' | sed 's/.*Commit: //')
            HEAD_SHA=$(git rev-parse HEAD)
            echo "Base SHA"
            echo $BASE_SHA
            echo ""
            echo "Head SHA"
            echo $HEAD_SHA
            echo ""
            echo "export NX_BASE=\"$BASE_SHA\";" >> $BASH_ENV
            echo "export NX_HEAD=\"$HEAD_SHA\";" >> $BASH_ENV
            echo ""
            echo "NX_BASE and NX_HEAD environment variables have been set for the current Job"
          environment:
            PARAM_ERROR_ON_NO_SUCCESSFUL_WORKFLOW: <<parameters.error-on-no-successful-workflow>>
            PARAM_MAIN_BRANCH: <<parameters.main-branch-name>>
            PARAM_SCRIPT: |
              #!/usr/bin/env node
              const { execSync } = require('child_process');
              const https = require('https');

              const buildUrl = process.argv[2];
              const branchName = process.argv[3];
              const mainBranchName = process.argv[4];
              const errorOnNoSuccessfulWorkflow = process.argv[5];

              const circleToken = process.env.CIRCLE_API_TOKEN;

              let BASE_SHA;
              (async () => {
                if (branchName !== mainBranchName) {
                  BASE_SHA = execSync(`git merge-base origin/${mainBranchName} HEAD`, { encoding: 'utf-8' });
                } else {
                  try {
                    BASE_SHA = await findSuccessfulCommit(buildUrl, mainBranchName);
                  } catch (e) {
                    process.stderr.write(e.message);
                    process.exit(1);
                  }

                  if (!BASE_SHA) {
                    if (errorOnNoSuccessfulWorkflow === 'true') {
                      process.stdout.write(`
                  Unable to find a successful workflow run on 'origin/${mainBranchName}'
                  NOTE: You have set 'error-on-no-successful-workflow' on the step so this is a hard error.

                  Is it possible that you have no runs currently on 'origin/${mainBranchName}'?
                  - If yes, then you should run the workflow without this flag first.
                  - If no, then you might have changed your git history and those commits no longer exist.`);
                      process.exit(1);
                    } else {
                      process.stdout.write(`
              WARNING: Unable to find a successful workflow run on 'origin/${mainBranchName}'.
              We are therefore defaulting to use HEAD~1 on 'origin/${mainBranchName}'.

              NOTE: You can instead make this a hard error by settting 'error-on-no-successful-workflow' on the step in your workflow.\n\n`);
                      BASE_SHA = execSync(`git rev-parse HEAD~1`, { encoding: 'utf-8' });
                    }
                  } else {
                    process.stdout.write(`
              Found the last successful workflow run on 'origin/${mainBranchName}'.\n\n`);
                  }
                }

                process.stdout.write(`Commit: ${BASE_SHA}\n`);
              })();

              async function findSuccessfulCommit(buildUrl, branch) {
                const project = buildUrl.match(/https:\/\/circleci.com\/(.*)\/\d./)[1];
                const url = `https://circleci.com/api/v2/project/${project}/pipeline?branch=${branch}`;

                let nextPage;
                let foundSHA;

                do {
                  const fullUrl = nextPage ? `${url}&page-token=${nextPage}` : url;
                  const { next_page_token, sha } = await getJson(fullUrl)
                    .then(async ({ next_page_token, items }) => {
                      const pipeline = await findSuccessfulPipeline(items);
                      return {
                        next_page_token,
                        sha: pipeline ? pipeline.vcs.revision : void 0
                      };
                    });

                  foundSHA = sha;
                  nextPage = next_page_token;
                } while (!foundSHA && nextPage);

                return foundSHA;
              }

              async function findSuccessfulPipeline(pipelines) {
                for (const pipeline of pipelines) {
                  if (!pipeline.errors.length
                    && commitExists(pipeline.vcs.revision)
                    && await isWorkflowSuccessful(pipeline.id)) {
                    return pipeline;
                  }
                }
                return undefined;
              }

              function commitExists(commitSha) {
                console.log('commitSha', commitSha);
                try {
                  execSync(`git cat-file -e ${commitSha} 2> /dev/null`);
                  return true;
                } catch {
                  return false;
                }
              }

              async function isWorkflowSuccessful(pipelineId) {
                console.log('pipelineId', pipelineId);
                return getJson(`https://circleci.com/api/v2/pipeline/${pipelineId}/workflow`)
                  .then(({ items }) => {
                    return items.filter((item) => item.name === '<<parameters.application-name>>-pipeline').some(item => item.status === 'success');
                  });
              }

              async function getJson(url) {
                return new Promise((resolve, reject) => {
                  let options = {};

                  if (circleToken) {
                    options.headers = {
                      'Circle-Token': circleToken
                    }
                  }

                  https.get(url, options, (res) => {
                    let data = [];

                    res.on('data', chunk => {
                      data.push(chunk);
                    });

                    res.on('end', () => {
                      const response = Buffer.concat(data).toString();
                      resolve(JSON.parse(response));
                    });
                  }).on('error', error => reject(error));
                });
              }
          name: Derives SHAs for base and head for use in `nx affected` commands
          shell: /bin/bash
orbs:
  nx: nrwl/nx@1.1.3
jobs:
  pr-build:
    docker:
      - image: 'cimg/node:14.17-browsers'
    resource_class: medium
    steps:
      - checkout
      - install-dependencies
      - nx/set-shas
      - run:
          name: Run affected builds
          command: npx nx affected --base=$NX_BASE --target=build --parallel=3
      - run:
          name: Run affected tests
          command: npx nx affected --base=$NX_BASE --target=test --parallel=2

  deploy:
    parameters:
      application:
        type: string
      environment:
        type: string
    docker:
      - image: 'cimg/node:14.17-browsers'
    resource_class: medium
    steps:
      - checkout
      - install-dependencies
      - set-shas:
          application-name: << parameters.application >>
      - cancel-non-affected:
          application: << parameters.application >>
      - install_doppler
      - run:
          name: Deploy << parameters.environment >>
          command: npx nx deploy-<< parameters.environment >> << parameters.application >>

workflows:
  pr:
    jobs:
      - pr-build:
          filters:
            branches:
              ignore: main

  setscore-web-pipeline:
    jobs:
      - deploy:
          name: Deploy Development (setscore-web)
          application: 'setscore-web'
          environment: 'development'
          filters:
            branches:
              only: main
      - staging-approval:
          name: Staging Approval (setscore-web)
          type: approval
          requires:
            - Deploy Development (setscore-web)
      - deploy:
          name: Deploy Staging (setscore-web)
          application: 'setscore-web'
          environment: 'staging'
          requires:
            - Staging Approval (setscore-web)
      - production-approval:
          name: Production Approval (setscore-web)
          type: approval
          requires:
            - Deploy Staging (setscore-web)
      - deploy:
          name: Deploy Production (setscore-web)
          application: 'setscore-web'
          environment: 'production'
          requires:
            - Production Approval (setscore-web)

  setscore-api-pipeline:
    jobs:
      - deploy:
          name: Deploy Development (setscore-api)
          application: 'setscore-api'
          environment: 'development'
          filters:
            branches:
              only: main
      - staging-approval:
          name: Staging Approval (setscore-api)
          type: approval
          requires:
            - Deploy Development (setscore-api)
      - deploy:
          name: Deploy Staging (setscore-api)
          application: 'setscore-api'
          environment: 'staging'
          requires:
            - Staging Approval (setscore-api)
      - production-approval:
          name: Production Approval (setscore-api)
          type: approval
          requires:
            - Deploy Staging (setscore-api)
      - deploy:
          name: Deploy Production (setscore-api)
          application: 'setscore-api'
          environment: 'production'
          requires:
            - Production Approval (setscore-api)
